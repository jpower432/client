// Collection Manager RPC protocol version v1alpha1
//
// This file defines version v1alpha1 of the RPC protocol. To implement a plugin
// against this protocol, copy this definition into your own codebase and
// use protoc to generate stubs for your target language.

syntax = "proto3";
import "google/protobuf/struct.proto";
option go_package = "github.com/uor-framework/uor-client-go/api/services/collectionmanager/v1alpha1";

package manager;

// CollectionManager is an endpoint that can retrieve and publish Collection
// contents for clients.
service CollectionManager {
  // ListContent lists content based on the request.
  rpc ListContent(List.Request) returns (List.Response) {}
  // PublishContent publishes content based on the request.
  rpc PublishContent(Publish.Request) returns (Publish.Response) {}
  // RetrieveContent retrieves content based on the request.
  rpc RetrieveContent(Retrieve.Request) returns (Retrieve.Response) {}
  // QueryLinks queries the registry for linked content.
  rpc QueryLinks(QueryLinks.Request) returns (QueryLinks.Response) {}
  // RetrieveContentStream retrieves content based on the request.
  rpc ReadLayer(ReadLayer.Request) returns (ReadLayer.Response) {}
//  // TODO - switch to stream response for robustness
//  // ReadLayerStream retrieves content based on the request.
//  rpc ReadLayerStream(ReadStream.Request) returns (stream ReadStream.Response) {}
}

message Diagnostic {
  enum Severity {
    INVALID = 0;
    ERROR = 1;
    WARNING = 2;
  }
  Severity severity = 1;
  string summary = 2;
  string detail = 3;
}

message List {
  message Request {
    string source = 1;
    google.protobuf.Struct filter = 2;
    AuthConfig auth = 3;
  }
  message Response {
    Collection collection = 1;
    string digest = 2;
    repeated Diagnostic diagnostics = 3;
  }
}

message Retrieve {
  message Request {
    string source = 1;
    string destination = 2;
    google.protobuf.Struct filter = 3;
    AuthConfig auth = 4;
  }
  message Response {
    repeated string digests = 1;
    repeated Diagnostic diagnostics = 2;
  }
}

message ReadLayer {
  message Request {
    string source = 1;
    string layer_title = 2; // layerInfo.Annotations[ocispec.AnnotationTitle]
    AuthConfig auth = 3;
  }
  message Response {
    Diagnostic diagnostic = 1;
    bytes binary = 2;
  }
}

message ReadLayerStream {
  message Request {
    string source = 1;
    string destination = 2;
    google.protobuf.Struct filter = 3;
    AuthConfig auth = 4;
  }
  message Response {
    oneof data {
      Diagnostic diagnostic = 1;
      bytes chunk = 2;
    }
  }
}


message QueryLinks {
  message Request {
    string digest = 1;
    string host = 2;
    FilterBy filter_by = 3;
    AuthConfig auth = 4;
  }
  message Response {
    Diagnostic diagnostic = 1;
    repeated QueryResponse links = 2;
  }
}

message QueryResponse {
  string digest = 1;
  google.protobuf.Struct attributes = 2;
}

message FilterBy {
  google.protobuf.Struct filter = 1;
  string schema_id = 2;
}

message Publish {
  message Request {
    string source = 1;
    string destination = 2;
    Collection collection = 3;
    AuthConfig auth = 4;

  }
  message Response {
    string digest = 1;
    repeated Diagnostic diagnostics = 2;
  }
}

// Collection contains configuration information for a collection.
message Collection {
  string schema_address = 1;
  repeated string linked_collections = 2;
  repeated File files = 3;
}

// File contains a regular expression for file name matching and associated
// attributes to apply the the descriptor for matching file.
message File {
  string file = 1;
  google.protobuf.Struct attributes = 2;
}

// AuthConfig contains authorization information for connecting to a registry.
message AuthConfig {
  string username = 1;
  string password = 2;
  string server_address = 3;
  string access_token = 4;
  string refresh_token = 5;
}

